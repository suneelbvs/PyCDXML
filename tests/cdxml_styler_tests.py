import unittest
from pycdxml import cdxml_styler
import filecmp
from pathlib import Path
import logging

logger = logging.getLogger('pycdxml.cdxml_styler')
logger.addHandler(logging.StreamHandler())
logger.setLevel(logging.INFO)


class CdxmlStylerTest(unittest.TestCase):

    def test_apply_named_style(self):
        styler = cdxml_styler.CDXMLStyler(style_name="ACS 1996")
        styler.apply_style_to_file(self.test_file, outpath=self.out_file)
        self.assertTrue(filecmp.cmp('tests/files/reference_style.cdxml', self.out_file, shallow=False),
                        "Generated cdxml file does not match expected outcome.")

    def test_apply_from_file(self):
        styler = cdxml_styler.CDXMLStyler(style_source="tests/files/ACS 1996.cdxml")
        styler.apply_style_to_file(self.test_file, outpath=self.out_file)
        self.assertTrue(filecmp.cmp('tests/files/reference_style.cdxml', self.out_file, shallow=False),
                        "Generated cdxml file does not match expected outcome.")

    def test_charge_symbol(self):
        styler = cdxml_styler.CDXMLStyler(style_name="ACS 1996")
        styler.apply_style_to_file(self.charge_file, outpath=self.charge_out_file)
        self.assertTrue(filecmp.cmp('tests/files/styler_charge_reference.cdxml', self.charge_out_file, shallow=False),
                        "Generated cdxml file does not match expected outcome.")

    def test_single_node(self):
        styler = cdxml_styler.CDXMLStyler(style_name="ACS 1996")
        styler.apply_style_to_file(self.single_node, outpath=self.single_node_out)
        self.assertTrue(filecmp.cmp('tests/files/single_node_reference.cdxml', self.single_node_out, shallow=False),
                        "Generated cdxml file does not match expected outcome.")

    def setUp(self):
        self.test_file = 'tests/files/styler_test_input.cdxml'
        self.charge_file = 'tests/files/styler_charge.cdxml'
        self.out_file = 'tests/files/styler_test_out.cdxml'
        self.charge_out_file = 'tests/files/styler_charge_out.cdxml'
        self.single_node = 'tests/files/single_node.cdxml'
        self.single_node_out = 'tests/files/single_node_out.cdxml'

    def tearDown(self):
        # Delete all files generated by tests
        for p in Path("files").glob("*_out.*"):
            p.unlink()


if __name__ == '__main__':
    unittest.main()
